name: Delete old release asset

on:
  schedule:
    - cron: "0 2 * * *"  # Spustí se každý den v 2:00 UTC
  workflow_dispatch:      # Možnost spustit ručně

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Purge stale releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # nebo použij PAT, pokud je potřeba
          REPO: ${{ github.repository }}
          MAX_AGE_DAYS: "7"
        run: |
          set -euo pipefail

          echo "DEBUG: running workflow on ref=$GITHUB_REF sha=$GITHUB_SHA"

          releases=$(curl -sS \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/releases?per_page=100")

          echo "DEBUG: releases response type=$(echo "$releases" | jq -r 'type')"
          echo "DEBUG: releases preview:" $(echo "$releases" | jq -r 'if (type=="array") then (.[0] | tostring) else tostring end' | cut -c1-200)

          # Kontrola chybové zprávy z API
          message=$(echo "$releases" | jq -r 'if type == "object" then .message // empty else empty end')
          if [ -n "$message" ]; then
            echo "GitHub API chyba: $message"
            exit 1
          fi

          release_count=$(echo "$releases" | jq 'if type == "array" then length else 0 end')
          if [ "$release_count" -eq 0 ]; then
            echo "Repozitář $REPO nemá žádné release – není co mazat."
            exit 0
          fi

          MAX_AGE_DAYS=${MAX_AGE_DAYS:-7}
          if ! [[ "$MAX_AGE_DAYS" =~ ^[0-9]+$ ]]; then
            echo "MAX_AGE_DAYS musí být celé číslo, aktuální hodnota: $MAX_AGE_DAYS"
            exit 1
          fi

          now_ts=$(date +%s)
          deleted=0
          kept=0

          mapfile -t release_array < <(echo "$releases" | jq -c '.[]')

          for release_json in "${release_array[@]}"; do
            release_id=$(jq -r '.id' <<<"$release_json")
            release_name=$(jq -r '.name // .tag_name // ("release-" + (.id|tostring))' <<<"$release_json")
            tag_name=$(jq -r '.tag_name // empty' <<<"$release_json")
            is_draft=$(jq -r '.draft' <<<"$release_json")
            published_at=$(jq -r '.published_at // .created_at // empty' <<<"$release_json")

            if [ "$is_draft" = "true" ]; then
              echo "Přeskakuji draft release $release_name (ID $release_id)."
              kept=$((kept + 1))
              continue
            fi

            if [ -z "$published_at" ] || ! release_ts=$(date -d "$published_at" +%s 2>/dev/null); then
              echo "Nepodařilo se zjistit datum release $release_name (ID $release_id), přeskakuji."
              kept=$((kept + 1))
              continue
            fi

            age_days=$(( (now_ts - release_ts) / 86400 ))
            echo "Release $release_name (ID $release_id) je starý $age_days dní."

            if [ "$age_days" -lt "$MAX_AGE_DAYS" ]; then
              echo "Release je mladší než $MAX_AGE_DAYS dní, ponechávám ho."
              kept=$((kept + 1))
              continue
            fi

            delete_status=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/$REPO/releases/$release_id")

            if [ "$delete_status" = "204" ]; then
              echo "Release $release_name odstraněn."
              deleted=$((deleted + 1))
            else
              echo "Mazání release $release_name selhalo s HTTP kódem $delete_status."
              kept=$((kept + 1))
            fi
          done

          echo "Souhrn: odstraněno $deleted release, ponecháno $kept release."

      - name: Debug – vypiš všechny releasy a assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          releases=$(curl -sS \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/releases?per_page=100")
          echo "=== RELEASES JSON ==="
          echo "$releases" | jq '.[] | {name, tag_name, draft, prerelease, assets: [.assets[]? | {id, name, created_at, size}]}' || echo "$releases"
          echo "=== END RELEASES ==="
